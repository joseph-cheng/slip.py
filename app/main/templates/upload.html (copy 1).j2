{% extends "header.html.j2" %}


{% block content %}
    <span id="uploadOuterGrid">
      <span class="title">Upload Replays</span>
      <span class="subtitle">(Max {{SIMULTANEOUS_UPLOADS}} at time)</span>
      <form id=replay-file-upload-form method=post enctype=multipart/form-data>
        <span id="uploadGrid">
          <div class="upload-btn-wrapper">
            <button class="fake-submit">Select Replay(s)...</button>
            <input type=file name=file id=replay-file-upload multiple/>
          </div>
          <button type="button" disabled id=upload-button class="fake-submit" onclick='submitReplay(-1)'>Upload All</button>
        </span>
      </form>
    </span>

    <script src="{{ url_for('static', filename='js/lzma-min.js') }}"></script>
    <script>
      var MAX_UPLOADS  = parseInt("{{SIMULTANEOUS_UPLOADS}}");
      var SLIPPIHEADER = "7b55037261775b24";
      var control      = document.getElementById("replay-file-upload");
      var uploadqueue  = [];
      var lzma         = new LZMA("{{ url_for('static', filename='js/lzma_worker-min.js') }}");

      function processFile(theFile){
        return function(e) {
          var fileByteArray = [];
          fileByteArray.push(e.target.result);
        }
      }

      function submitReplay(index=-1) {
        if (index < 0) {
          document.getElementById("upload-button").disabled = true;
          for(var i = 0; i < uploadqueue.length; i++) {
            submitReplay(i);
          }
          return;
        }
        var ubutton = document.getElementById("u-button-"+index);
        if (!uploadqueue[index].valid || ubutton.disabled) {
          return;
        }
        // alert(JSON.stringify(uploadqueue[index]));
        // alert(index);
        ubutton.disabled = true;

        ubutton.innerText = "Compressing";
        var files = uploadqueue[index]["fdata"];
        var reader = new FileReader();
        reader.onload = processFile(files);
        reader.readAsArrayBuffer(files);
        alert(reader.result);
        // my_lzma.compress(string || byte_array, mode, on_finish(result, error) {}, on_progress(percent) {});

        ubutton.innerText = "Uploading";
        var formData = new FormData();
        formData.append('file', uploadqueue[index]["fdata"]);
        $.ajax({
          type        : "post",
          url         : "/api/upload",
          data        : formData,
          contentType : false,
          cache       : false,
          processData : false,
          success     : function(rjson) {
            ubutton.innerText  = rjson["status"];
            ubutton.title      = JSON.stringify(rjson);
            ubutton.className += " hasinfo";
            if ("analysis-url" in rjson) {
              document.getElementById("u-filename-"+index).innerHTML = "<a title='View Analysis of "+rjson["filename"]+"' target='_blank' class='nostyle replay-link' href='"+rjson["analysis-url"]+"'>"+rjson["filename"]+"</a>";
            }
          },
          error: function(XMLHttpRequest, textStatus, errorThrown) {
            ubutton.innerText = "Error";
            ubutton.title     = "Status: " + textStatus+"\nError: " + errorThrown;
          }
        });
      }

      function createUploadItem(u) {
        var k = ' \
          <span id="u-filename-'+u.id+'" class="transient u-filename">'+(u["filename"]||"[filename]")+'</span> \
          <button type="button" onclick="submitReplay('+u.id+')" id="u-button-'+u.id+'" class="transient u-button">'+(u["upload"]||"Upload")+'</button> \
          ';
          // <span id="u-status-'+u.id+'" class="u-status">'+(u["status"]||"Ready")+'</span> \
          // <button onclick="submitReplay('+u+')" class="u-button" disabled>'+(u["upload"]||"Upload")+'</button> \
        document.getElementById('uploadGrid').insertAdjacentHTML("beforeend", k);
      }

      function addTentativeUpload(udata, callback) {
        return function(e) {
          var arr = (new Uint8Array(e.target.result)).subarray(0, 8);
          var header = "";
          for(var i = 0; i < arr.length; i++) {
             char = arr[i].toString(16);
             if (char.length == 1) {
               header += "0";
             }
             header += char;
          }
          createUploadItem(udata);
         document.getElementById("upload-button").disabled = false;
          var ubutton = document.getElementById("u-button-"+udata.id);
          udata.valid = header === SLIPPIHEADER;
          if(udata.valid) {
            ubutton.disabled  = false;
            ubutton.innerText = "Upload";
            // udata["upload"]   = "Upload";
          } else {
            ubutton.disabled  = true;
            ubutton.innerText = "Not a valid Slippi replay";
            // udata["status"]   = "Failed";
            // udata["upload"]   = "Not a valid Slippi replay";
          }
        }
      }

      // When the control has changed, there are new files
      control.addEventListener("change", function(event) {
          //Delete all old items
          var elements = document.getElementById("uploadGrid").getElementsByClassName("transient");
          while (elements[0]) {
            elements[0].parentNode.removeChild(elements[0]);
          }
          //Reset the upload queue
          uploadqueue = [];

          //Get the list of files
          var files = control.files;

          //Set the data for each file, add them to the queue, and validate their headres
          for (var i = 0; i < Math.min(files.length,MAX_UPLOADS); i++) {
            var udata = {
              id:       i,
              status:   "Ready",
              filename: files[i].name,
              upload:   "",
              fdata:    files[i],
              valid:    false,
              };
            uploadqueue.push(udata);
            var fileReader       = new FileReader();
            fileReader.onloadend = addTentativeUpload(udata);
            fileReader.readAsArrayBuffer(files[i]);
          }
      }, false);
    </script>
{% endblock %}
