{% extends "header.html.j2" %}

{% block content %}
  <div id="replayDataOuterGrid">
      {% set r = replay %}
      {% include '_replay-mini.html.j2' %}
      {# <span id="intBreakdown" class="stacked-bar-graph">
        {% for k,v in r.players[0].interaction_frames.items() %}
          <span title="{{ k }}" style="width:{{100*v / r.__act_length}}%" class="interaction int_{{ k }}"></span>
        {% endfor %}
      </span> #}
      <div id="replayDataGrid">
          <div class="heading">Overview</div>
            <div class="stat">End Stocks</div>
            <div class="stat">End %</div>
            <div class="stat">Time Airborne</div>
            <div class="stat">Ledge Grabs</div>

          <div class="heading">Interactions (Damage Dealt)</div>
            {% for k in INTERACTIONS %}
              <div class="stat op-{{k}}">{{k.title()}}</div>
            {% endfor %}

          <div class="heading">Neutral</div>
            <div class="stat">Neutral Wins</div>
            <div class="stat">Counterattacks</div>
            <div class="stat">Pokes</div>
            <div class="stat">Reverse Edgeguards</div>
            <div class="stat">Dashdances</div>
            <div class="stat">Short Hops</div>
            <div class="stat">Full Hops</div>

          <div class="heading">Offense</div>
            <div class="stat">Damage Dealt</div>
            <div class="stat">Total Openings</div>
            <div class="stat">Damage / Opening</div>
            <div class="stat">Openings / Kill</div>
            <div class="stat">Damage / Kill</div>
            <div class="stat">Moves Landed</div>
            <div class="stat">Shield Stabs</div>
            <div class="stat">Shields Broken</div>
            <div class="stat">Grabs Landed</div>
            <div class="stat">Stage Spikes</div>

          <div class="heading">Defense</div>
            <div class="stat">Airdodges</div>
            <div class="stat">Spotdodges</div>
            <div class="stat">Rolls</div>
            <div class="stat">Grabs Escaped</div>
            <div class="stat">Attacks Shielded</div>
            <div class="stat">Attacks Powershielded</div>
            <div class="stat">Floor Techs</div>
            <div class="stat">Wall Techs</div>
            <div class="stat">Wall Tech Jumps</div>
            <div class="stat">Frames in Shield</div>
            <div class="stat">Shield Damage Taken</div>
            <div class="stat">Lowest Shield Health</div>

          <div class="heading">Technique</div>
            <div class="stat">L Cancels Hit</div>
            <div class="stat">Techs Hit</div>
            <div class="stat">Wavedashes</div>
            <div class="stat">Wavelands</div>
            <div class="stat">Shield Drops</div>
            <div class="stat">No Impact Lands</div>
            <div class="stat">Pivots</div>
            <div class="stat">Edge-cancelled Aerials</div>
            <div class="stat">Edge-cancelled Specials</div>
            <div class="stat">Teeter-cancelled Aerials</div>
            <div class="stat">Teeter-cancelled Specials</div>
            <div class="stat">Meteor Cancels</div>
            <div class="stat">Intangible Ledgedashes</div>
            <div class="stat">Mean GALINT</div>

          <div class="heading">Miscellaneous</div>
            <div class="stat">Taunts</div>
            <div class="stat">Phantom Hits</div>
            <div class="stat">Self Destucts</div>

          {% for p in r.p %}
            {% set outer_loop = loop %}
            {% set pi = "p"+loop.index|string+"item" %}
            {% macro _stat(statname,f="%.0f",suffix="") -%}
                <div class="{{pi}}">{{ f|format(p[statname])+suffix }}</div>
            {%- endmacro %}
            {% macro _stathi(statname,f="%.0f",suffix="") -%}
                <div class="{{pi}} {{hl_if_higher(r,loop.index,statname)}}">{{ f|format(p[statname])+suffix }}</div>
            {%- endmacro %}
            {% macro _statlo(statname,f="%.0f",suffix="") -%}
                <div class="{{pi}} {{hl_if_lower(r,loop.index,statname)}}">{{ f|format(p[statname])+suffix }}</div>
            {%- endmacro %}

            {# Overview #}
            {{ _stathi("end_stocks" )}}
            {{ _stat("end_pct","%.0f","%")}}
            <div class="{{pi}}">{{ "%.2f"|format(100*p["air_frames"]/r["game_length"]) }}%</div>
            {{ _stat("ledge_grabs" )}}

            {# Interactions #}
            {% for k in INTERACTIONS %}
                {{ _stathi('__dmg'+k,"%.0f","%")}}
            {% endfor %}

            {# Neutral #}
            {{ _stathi("neutral_wins" )}}
            {{ _stathi("counters" )}}
            {{ _stathi("pokes" )}}
            {{ _stathi("reverse_edgeguards" )}}
            {{ _stathi("dashdances" )}}
            {{ _stathi("short_hops" )}}
            {{ _stathi("full_hops" )}}

            {# Offense #}
            {{ _stathi("damage_dealt","%.2f","%")}}
            {{ _stathi("total_openings" )}}
            {{ _stathi("mean_opening_percent" )}}
            {{ _statlo("mean_kill_openings" )}}
            {{ _statlo("mean_kill_percent" )}}
            {{ _stathi("num_moves_landed" )}}
            {{ _stathi("shield_stabs" )}}
            {{ _stathi("shield_breaks" )}}
            {{ _stathi("grabs" )}}
            {{ _stathi("stage_spikes" )}}

            {# Defense #}
            {{ _stathi("airdodges") }}
            {{ _stathi("spotdodges") }}
            {{ _stathi("rolls") }}
            {{ _stathi("grab_escapes") }}
            {{ _stathi("hits_blocked") }}
            {{ _stathi("powershields") }}
            {{ _stathi("techs") }}
            {{ _stathi("walltechs") }}
            {{ _stathi("walltechjumps") }}
            {{ _statlo("shield_time") }}
            {{ _statlo("shield_damage") }}
            {{ _stathi("shield_lowest") }}

            {# Tech #}
            <div class="{{pi}} {{hl_if_higher(r,loop.index,'__l_cancels_hit_pct')}}">{{ p["l_cancels_hit"] }} ({{ "%.0f%%"|format(p["__l_cancels_hit_pct"]) }})</div>
            <div class="{{pi}} {{hl_if_higher(r,loop.index,'__tech_hit_pct')}}">{{ (p["techs"]+p["walltechs"]+p["walltechjumps"]) }} ({{ "%.0f%%"|format(p["__tech_hit_pct"]) }})</div>
            {{ _stathi("wavedashes") }}
            {{ _stathi("wavelands") }}
            {{ _stathi("shield_drops") }}
            {{ _stathi("no_impact_lands") }}
            {{ _stathi("pivots") }}
            {{ _stathi("edge_cancel_aerials") }}
            {{ _stathi("edge_cancel_specials") }}
            {{ _stathi("teeter_cancel_aerials") }}
            {{ _stathi("teeter_cancel_specials") }}
            {{ _stathi("meteor_cancels") }}
            {{ _stathi("galint_ledgedashes") }}
            {{ _stathi("mean_galint") }}

            {# Miscellaneous #}
            {{ _stat("taunts")}}
            {{ _stat("phantom_hits")}}
            <div class="{{pi}} {{'hl-red' if p['self_destructs'] > 0}}">{{ p["self_destructs"] }}</div>
          {% endfor %}
      </div> {# replayDataGrid #}

      {# Move / Punish List #}
      {# TODO: document how this works, this is really hard to read #}
      {% for p in r.p %}
          {% set outer_loop = loop %}
          <div id="replayPlayer{{loop.index}}Grid">
              <div class="heading" style="grid-area: moves{{loop.index}}">Moves Shown</div>
              <div class="comboGrid">
                  {% if outer_loop.index == 1 and p["punishes"]|length > 0 %}
                      {% set dam  = p["punishes"][0]["end_pct"]-p["punishes"][0]["start_pct"] %}
                      {% set time = p["punishes"][0]["start_frame"] %}
                      <span class="comboResult {{'hugecombo' if dam > 65 else 'bigcombo' if dam > 40 else ''}}">
                          {{"%.0f"|format(dam)}}%
                          <span class="timer">{{frame_to_timestamp(time)}}</span>
                      </span>
                  {% endif %}
                  <span class="comboWrapper">
                    {% for a in p["attacks"] %}
                        {% if loop.index > 1 and a["punish_id"] != p["attacks"][loop.index0-1]["punish_id"] %}
                            </span> {# comboWrapper #}
                            {% if outer_loop.index == 1 %}
                                {% set dam =
                                    p["punishes"][a["punish_id"]]["end_pct"]-
                                    p["punishes"][a["punish_id"]]["start_pct"]
                                %}
                                {% set time = p["punishes"][a["punish_id"]]["start_frame"] %}
                            {% else %}
                                {% set dam =
                                    p["punishes"][p["attacks"][loop.index0-1]["punish_id"]]["end_pct"]-
                                    p["punishes"][p["attacks"][loop.index0-1]["punish_id"]]["start_pct"]
                                %}
                                {% set time = p["punishes"][p["attacks"][loop.index0-1]["punish_id"]]["start_frame"] %}
                            {% endif %}
                            <span class="comboResult {{'hugecombo' if dam > 65 else 'bigcombo' if dam > 40 else ''}}">
                                {{"%.0f"|format(dam)}}%
                                <span class="timer">{{frame_to_timestamp(time)}}</span>
                            </span>
                            <span class="comboWrapper">
                        {% endif %}
                        {% if p["attacks"]|length == loop.index or a["hit_id"] >= p["attacks"][loop.index0+1]["hit_id"] %}
                            <span class="combomoveWrapper op-{{a['opening']}}">
                                <span title="{{a}}" class="combomove">
                                    {{a["cancel_name"]+" " if a["move_name"] != "" else ""}}{{a["move_name"]}}{{' ('+a['hit_id']|string+')' if a['hit_id']>1}}
                                    {% if a["kill_dir"] != "NEUT" %}
                                        </span></span>
                                        <span class="combomoveWrapper op-DEATH"><span title="K.O. {{a['kill_dir']}}" class="combomove">
                                        <img class="killicon" src="{{ url_for('static', filename='icons/sandbag.png') }}"/>
                                    {% endif %}
                                </span> {# combomove #}
                            </span> {# combomoveWrapper #}
                        {% endif %}
                    {% endfor %}
                  </span> {# comboWrapper #}
                  {% if outer_loop.index == 2 and p["punishes"]|length > 0 %}
                      {% set dam  = p["punishes"][-1]["end_pct"]-p["punishes"][-1]["start_pct"] %}
                      {% set time = p["punishes"][-1]["start_frame"] %}
                      <span class="comboResult {{'hugecombo' if dam > 65 else 'bigcombo' if dam > 40 else ''}}">
                          {{"%.0f"|format(dam)}}%
                          <span class="timer">{{frame_to_timestamp(time)}}</span>
                      </span>
                  {% endif %}
              </div> {# comboGrid #}
          </div> {# replayPlayerXGrid #}
      {% endfor %}
  </div> {# replayDataOuterGrid #}
{% endblock %}
