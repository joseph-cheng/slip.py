{% extends "header.html.j2" %}

{% block content %}
  <div id="replayDataOuterGrid">
      {% set r = replay %}
      {% include '_replay-mini.html.j2' %}
      {# <span id="intBreakdown" class="stacked-bar-graph">
        {% for k,v in r.players[0].interaction_frames.items() %}
          <span title="{{ k }}" style="width:{{100*v / r.__act_length}}%" class="interaction int_{{ k }}"></span>
        {% endfor %}
      </span> #}

      <script type="text/javascript">
        var uvars = getUrlVars();

        // Fetch global navigation list
        {% if "next" in REPLAY_NAV[r.__checksum] %}
          {% set nav_next = '"'+REPLAY_NAV[r.__checksum]["next"]+'"' %}
          var nav_next = {{nav_next}};
        {% else %}
          var nav_next = undefined;
        {% endif %}

        {% if "prev" in REPLAY_NAV[r.__checksum] %}
          {% set nav_prev = '"'+REPLAY_NAV[r.__checksum]["prev"]+'"' %}
          var nav_prev = {{nav_prev}};
        {% else %}
          var nav_prev = undefined;
        {% endif %}


        function openContainingDir(d,f) {
          $.ajax({
              type        : "post",
              url         : "/api/open",
              data        : JSON.stringify({"dir" : d, "name" : f}),
              dataType    : "json",
              contentType : "application/json",
              cache       : false,
              processData : false,
              success: function (rjson) {
                return;
                // window.location.href = window.location.href;
              }
          });
        }
        function viewRawAnalysis() {
          $.ajax({
            type        : "get",
            url         : "/api/raw/{{r.__checksum}}",
            data        : JSON.stringify({}),
            dataType    : "json",
            contentType : "application/json",
            cache       : false,
            processData : false
          });
        }
        function watchReplay() {
          $.ajax({
              type        : "get",
              url         : "/api/play/{{r.__checksum}}",
              data        : JSON.stringify({}),
              dataType    : "json",
              contentType : "application/json",
              cache       : false,
              processData : false
          });
        }
        function prevReplay() {
          if (nav_prev) {
            scroll = document.getElementById("bodyWrapper").scrollTop;
            url    = "{{ url_for('main.replays')}}/"+nav_prev;
            url = URL_add_parameter(url,"scroll",scroll);
            window.location.href = url;
          }
        }
        function nextReplay() {
          if (nav_next) {
            scroll = document.getElementById("bodyWrapper").scrollTop;
            url    = "{{ url_for('main.replays')}}/"+nav_next;
            url = URL_add_parameter(url,"scroll",scroll);
            window.location.href = url;
          }
        }

        function returnToSearch() {
          window.location.href = "{{ url_for('main.last_search')}}";
        }

        window.onload = function(e) {
          document.getElementById("bodyWrapper").scrollTop = uvars["scroll"]
        }

        document.onkeydown = function(e) {
            switch(e.which) {
                case 37: // left
                prevReplay();
                break;

                case 38: // up
                returnToSearch();
                break;

                case 39: // right
                nextReplay();
                break;

                default: return; // exit this handler for other keys
            }
            e.preventDefault(); // prevent the default action (scroll / move caret)
        };
      </script>

      <div id="leftbuttonGrid">
        {% if nav_prev %}
          <button id="prevGameButton" type="button" onclick='prevReplay()'>Prev. Replay</button>
        {% else %}
          <button disabled id="prevGameButton" type="button">Prev. Replay</button>
        {% endif %}
        <button type="button" onclick='openContainingDir({{r.__filedir|tojson}},"{{r.__original_filename}}")'>Open Replay Folder</button>
        {% if r.__exists %}
          <button type="button" {{ "" if r.__canplay else "disabled"}} onclick='watchReplay()'>{{r.__play}}</button>
        {% else %}
          <button disabled class="missing" type="button" onclick=''>Replay Not Found</button>
        {% endif %}
      </div>

      <div id="rightbuttonGrid">
        {% if nav_next %}
          <button id="nextGameButton" type="button" onclick='nextReplay()'>Next Replay</button>
        {% else %}
          <button disabled id="nextGameButton" type="button">Next Replay</button>
        {% endif %}
        <button type="button" onclick='viewRawAnalysis()'>View Raw Analysis</button>
        <button type="button" onclick='returnToSearch()'>Back to Search Results</button>
      </div>

      {% macro _statcommon(title,headclass,statname,f="%.0f",suffix="",hlfunc=no_hl,pctname='') -%}
        <div class="stat {{headclass}}">{{title}}</div>
        {% for p in r.p %}
          {% set pi = "p"+loop.index|string+"item" %}
          <div class="{{pi}} {{hlfunc(r,loop.index,statname)}}">
            {% if statname in p %}
              {% if pctname == '' %}
                {{ f|format(p[statname])+suffix }}
              {% elif pctname in p %}
                {{ p[statname] }} ({{ "%.0f%%"|format(p[pctname]) }})
              {% else %}
                ???
              {% endif %}
            {% elif statname in r %}
              {{ f|format(r[statname])+suffix }}
            {% else %}
              ???
            {% endif %}
          </div>
        {% endfor %}
      {%- endmacro %}

      {% macro _stat(title,statname,f="%.0f",suffix="") -%}
        {{_statcommon(title,"",statname,f,suffix,no_hl)}}
      {%- endmacro %}
      {% macro _stathi(title,statname,f="%.0f",suffix="") -%}
        {{_statcommon(title,"",statname,f,suffix,hl_if_higher)}}
      {%- endmacro %}
      {% macro _statlo(title,statname,f="%.0f",suffix="") -%}
        {{_statcommon(title,"",statname,f,suffix,hl_if_lower)}}
      {%- endmacro %}
      {% macro _statred(title,statname,f="%.0f",suffix="") -%}
        {{_statcommon(title,"",statname,f,suffix,red_if_nonzero)}}
      {%- endmacro %}
      {% macro _stathipct(title,statname,pctname,f="%.0f",suffix="") -%}
        {{_statcommon(title,"",statname,f,suffix,hl_if_higher,pctname)}}
      {%- endmacro %}
      {% macro _stathiint(title,stattype,statname,f="%.0f",suffix="") -%}
        {{_statcommon(title,"op-"+stattype,statname,f,suffix,hl_if_higher)}}
      {%- endmacro %}

      <div id="replayDataGrid">
        <div class="heading">Overview</div>
          {# {{    _stathi("Missing",             "missing"                     )}} #}
          {{      _stat("Game Length"         ,"__game_secs",     "%s"       )}}
          {{    _stathi("End Stocks"          ,"end_stocks"                  )}}
          {{      _stat("End %"               ,"end_pct",         "%.0f", "%")}}
          {{    _stathi("Actions / Min."      ,"actions_per_min", "%.1f", "" )}}
          {{    _stathi("Action States / Min.","states_per_min" , "%.1f", "" )}}
          {{      _stat("Time Airborne"       ,"__air_pct",       "%.2f", "%")}}
          {{      _stat("Ledge Grabs"         ,"ledge_grabs"                 )}}
          {{      _stat("Connect Code"        ,"tag_code"   ,     "%s"       )}}

        <div class="heading">Interactions (Damage Dealt)</div>
          {% for k in interactions %}
           {{_stathiint(k.title()             ,k,'__dmg'+k,       "%.0f", "%")}}
          {% endfor %}

        <div class="heading">Neutral</div>
          {{    _stathi("Neutral Wins"       , "neutral_wins"                )}}
          {{    _stathi("Pokes"              , "pokes"                       )}}
          {{    _stathi("Counterattacks"     , "counters"                    )}}
          {{    _stathi("Reverse Edgeguards" , "reverse_edgeguards"          )}}
          {{    _stathi("Dashdances"         , "dashdances"                  )}}
          {{    _stathi("Short Hops"         , "short_hops"                  )}}
          {{    _stathi("Full Hops"          , "full_hops"                   )}}

        <div class="heading">Offense</div>
          {{    _stathi("Damage Dealt"     , "damage_dealt",      "%.2f", "%")}}
          {{    _stathi("Total Openings"   , "total_openings"                )}}
          {{    _stathi("Damage / Opening" , "mean_opening_percent"          )}}
          {{    _statlo("Openings / Kill"  , "mean_kill_openings"            )}}
          {{    _statlo("Damage / Kill"    , "mean_kill_percent"             )}}
          {{    _stathi("Moves Landed"     , "total_moves_landed"            )}}
          {{    _stathi("Moves Used"       , "total_moves_used"              )}}
          {{    _stathi("Move Accuracy"    , "move_accuracy",     "%.1f", "%")}}
          {{    _stathi("Shield Stabs"     , "shield_stabs"                  )}}
          {{    _stathi("Shields Broken"   , "shield_breaks"                 )}}
          {{    _stathi("Grabs Landed"     , "grabs"                         )}}
          {{    _stathi("Stage Spikes"     , "stage_spikes"                  )}}

        <div class="heading">Defense</div>
          {{    _stathi("Airdodges"             ,"airdodges"                 )}}
          {{    _stathi("Spotdodges"            ,"spotdodges"                )}}
          {{    _stathi("Rolls"                 ,"rolls"                     )}}
          {{    _stathi("Grabs Escaped"         ,"grab_escapes"              )}}
          {{    _stathi("Attacks Shielded"      ,"hits_blocked"              )}}
          {{    _stathi("Attacks Powershielded" ,"powershields"              )}}
          {{    _stathi("Floor Techs"           ,"techs"                     )}}
          {{    _stathi("Wall Techs"            ,"walltechs"                 )}}
          {{    _stathi("Wall Tech Jumps"       ,"walltechjumps"             )}}
          {{    _statlo("Frames in Shield"      ,"shield_time"               )}}
          {{    _statlo("Shield Damage Taken"   ,"shield_damage"             )}}
          {{    _stathi("Lowest Shield Health"  ,"shield_lowest"             )}}

        <div class="heading">Technique</div>
          {{ _stathipct("L Cancels Hit"            ,"l_cancels_hit","__l_cancels_hit_pct" )}}
          {{ _stathipct("Techs Hit"                ,"__techs_hit",  "__tech_hit_pct"      )}}
          {{    _statlo("Mean Actionability"       ,"actionability",           "%.1f",  "")}}
          {{    _stathi("Wavedashes"               ,"wavedashes"                          )}}
          {{    _stathi("Wavelands"                ,"wavelands"                           )}}
          {{    _stathi("Shield Drops"             ,"shield_drops"                        )}}
          {{    _stathi("No Impact Lands"          ,"no_impact_lands"                     )}}
          {{    _stathi("Pivots"                   ,"pivots"                              )}}
          {{    _stathi("Edge-cancelled Aerials"   ,"edge_cancel_aerials"                 )}}
          {{    _stathi("Edge-cancelled Specials"  ,"edge_cancel_specials"                )}}
          {{    _stathi("Teeter-cancelled Aerials" ,"teeter_cancel_aerials"               )}}
          {{    _stathi("Teeter-cancelled Specials","teeter_cancel_specials"              )}}
          {{    _stathi("Meteor Cancels"           ,"meteor_cancels"                      )}}
          {{    _stathi("Intangible Ledgedashes"   ,"galint_ledgedashes"                  )}}
          {{    _stathi("Mean GALINT"              ,"mean_galint"                         )}}
          {{    _stathi("Max GALINT"               ,"max_galint"                          )}}

        <div class="heading">Miscellaneous</div>
          {{      _stat("Taunts"       , "taunts")}}
          {{      _stat("Phantom Hits" , "phantom_hits")}}
          {{   _statred("Self Destucts", "self_destructs")}}

      </div> {# replayDataGrid #}

      {# Move / Punish List #}
      {# TODO: document how this works, this is really hard to read #}
      {% for p in r.p %}
          {% set outer_loop = loop %}
          <div id="replayPlayer{{loop.index}}Grid">
              <div class="heading" style="grid-area: moves{{loop.index}}">Moves Shown</div>
              <div class="comboGrid">
                  {% if outer_loop.index == 1 and p["punishes"]|length > 0 %}
                      {% set dam  = p["punishes"][0]["end_pct"]-p["punishes"][0]["start_pct"] %}
                      {% set time = p["punishes"][0]["start_frame"] %}
                      <span class="comboResult {{'hugecombo' if dam > 65 else 'bigcombo' if dam > 40 else ''}}">
                          {{"%.0f"|format(dam)}}%
                          <span class="timer">{{frame_to_timestamp(time)}}</span>
                      </span>
                  {% endif %}
                  <span class="comboWrapper">
                    {% for a in p["attacks"] %}
                        {% if loop.index > 1 and a["punish_id"] != p["attacks"][loop.index0-1]["punish_id"] %}
                            </span> {# comboWrapper #}
                            {% if outer_loop.index == 1 %}
                                {% set dam =
                                    p["punishes"][a["punish_id"]]["end_pct"]-
                                    p["punishes"][a["punish_id"]]["start_pct"]
                                %}
                                {% set time = p["punishes"][a["punish_id"]]["start_frame"] %}
                            {% else %}
                                {% set dam =
                                    p["punishes"][p["attacks"][loop.index0-1]["punish_id"]]["end_pct"]-
                                    p["punishes"][p["attacks"][loop.index0-1]["punish_id"]]["start_pct"]
                                %}
                                {% set time = p["punishes"][p["attacks"][loop.index0-1]["punish_id"]]["start_frame"] %}
                            {% endif %}
                            <span class="comboResult {{'hugecombo' if dam > 65 else 'bigcombo' if dam > 40 else ''}}">
                                {{"%.0f"|format(dam)}}%
                                <span class="timer">{{frame_to_timestamp(time)}}</span>
                            </span>
                            <span class="comboWrapper">
                        {% endif %}
                        {% if p["attacks"]|length == loop.index or a["hit_id"] >= p["attacks"][loop.index0+1]["hit_id"] %}
                            <span class="combomoveWrapper op-{{a['opening']}}">
                                <span title="{{a}}" class="combomove">
                                    {{a["cancel_name"]+" " if a["move_name"] != "" else ""}}{{a["move_name"]}}{{' ('+a['hit_id']|string+')' if a['hit_id']>1}}
                                    {% if a["kill_dir"] != "NEUT" %}
                                        </span></span>
                                        <span class="combomoveWrapper op-DEATH"><span title="K.O. {{a['kill_dir']}}" class="combomove">
                                        <img class="killicon" src="{{ url_for('static', filename='icons/sandbag.png') }}"/>
                                    {% endif %}
                                </span> {# combomove #}
                            </span> {# combomoveWrapper #}
                        {% endif %}
                    {% endfor %}
                  </span> {# comboWrapper #}
                  {% if outer_loop.index == 2 and p["punishes"]|length > 0 %}
                      {% set dam  = p["punishes"][-1]["end_pct"]-p["punishes"][-1]["start_pct"] %}
                      {% set time = p["punishes"][-1]["start_frame"] %}
                      <span class="comboResult {{'hugecombo' if dam > 65 else 'bigcombo' if dam > 40 else ''}}">
                          {{"%.0f"|format(dam)}}%
                          <span class="timer">{{frame_to_timestamp(time)}}</span>
                      </span>
                  {% endif %}
              </div> {# comboGrid #}
          </div> {# replayPlayerXGrid #}
      {% endfor %}
  </div> {# replayDataOuterGrid #}
{% endblock %}
