<!DOCTYPE html>
<meta charset="utf-8">
<style>

.title {
  font: 15px sans-serif;
}

.legend {
  font: 10px sans-serif;
}
.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.svg-container {
  display        : inline-block;
  position       : relative;
  width          : 100%;
  /*height         : 100%;*/
  vertical-align : top;
  overflow       : hidden;
}

div.tooltip {
  z-index        : 100000;
  position       : absolute;
  text-align     : center;
  padding        : 2px;
  font           : 12px sans-serif;
  background     : rgba(255,255,255,0.75);
  border         : 2px solid black;
  border-radius  : 8px;
  pointer-events : none;
}

div.tooltip td {
  padding: 0 4px;
}

</style>
<body>
  {# <div>{{(stats["top"]|tojson)}}</div> #}
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>

<script>
  var data    = {{ (data|tojson) }};
  var cwidth  = 1920;  //Width of canvas
  var cheight = 850;   //Height of canvas
  var mleft   = 30;    //Lefthand margin
  var mright  = 20;    //Righthand margin
  var xfill   = 0.5;   //Amount of free space bars fill up

  // X axis labels
  var labels  = data.map(function(item) {return item["label"];});
  // # of labels
  var nlabels = labels.length;
  // width of canvas minus margins
  var width   = cwidth - mleft - mright;
  // space between bars on canvas
  var xspace  = width/nlabels; //Spacing between tick marks
  // width of bars on canvas
  var barwidth = xspace*xfill;            //Width of bars

  var margin = {
    top    : 20,         //Leave enough space for title
    right  : mright,
    bottom : xspace*1.5, //Leave enough space for labels
    left   : mleft
    };
  var height = cheight - margin.top - margin.bottom;

  var x = d3.scaleOrdinal()
    .domain(labels)
    .range(d3.range(barwidth, width, xspace));

  var y = d3.scaleLinear()
    .range([height, margin.top]);

  var center = d3.scaleLinear()
    .range([barwidth/2, width-barwidth/2-2]);

  var color = d3.scaleOrdinal()
    .range(["#CC3333", "#33CC33"]);

  var xAxis      = d3.axisBottom(x);
  var yAxis      = d3.axisLeft(y).ticks(10);
  var centerLine = d3.axisTop(center).ticks(0);

  data.forEach(function(d) {
    d.components = [
      {parent: d, sign:  1, key : "wins",   y1: 0, y0: d["pos"]}, //Wins
      {parent: d, sign: -1, key : "losses", y0: 0, y1: d["neg"]}, //Losses
      ];
  })

  //Scale y axis to max of wins / losses in both directions
  var y_min = d3.min(data, function(d) {
    return -d["neg"] - 16;
  });
  var y_max = d3.max(data, function(d) {
    return d["pos"]  + 16;
  });

  x.domain(labels);
  y.domain([y_min, y_max]);
  color.domain(["wins,losses"]);

  var div = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);

  var svg = d3.select("body")
             .append("div")
             .classed("svg-container", true)
             .append("svg")
              .attr("preserveAspectRatio", "xMinYMin meet")
              .attr("viewBox", "0 0 "+cwidth+" "+cheight)
              .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis)
    .selectAll("text")
      .attr("font-size", d => `${xspace/4}px`)
      // .attr("y", -barwidth/2)
      .attr("y", 0)
      .attr("x", 9)
      .attr("dy", ".35em")
      .attr("transform", "rotate(90)")
      .style("text-anchor", "start");
    ;

  svg.append("g")
    .attr("class", "y axis")
    .call(yAxis);

  svg.append("g")
    .attr("class", "centerline")
    .attr("transform", "translate(0," + y(0) + ")")
    .call(centerLine);

  // var entry = svg.selectAll(".entry")
  //   .data(data)
  //   .enter().append("g")
  //   .attr("class", "g")
  //   .attr("transform", function(d) { return "translate(" + x(parseDate(d.date)) + ", 0)"; });

  var entry = svg.selectAll(".entry")
    .data(data)
    .enter().append("g")
    .attr("class", "g")
    .attr("transform", function(d) { return "translate(" + x(d["label"]) + ", 0)"; });

  entry.selectAll("text")
    .data(function(d) { return d.components; })
    .enter().append("text")
      .attr("font-size", d => `${xspace/4}px`)
      .text(function(d) { return (d.sign == 1 ? d.y0 : d.y1); })
      .attr("text-anchor", "middle")
      .attr("alignment-baseline", "central")
      .attr("x", 0)
      .attr("y", function(d) { return -d.sign*10+y(d.sign == 1 ? d.y0 : -d.y1); })
    ;
  entry.selectAll("rect")
    .data(function(d) { return d.components; })
    .enter().append("rect")
      .attr("width", barwidth)
      .attr("x", -barwidth/2 )
      .attr("y", function(d) { return y(d.y0); })
      .attr("height", function(d) { return Math.abs(y(d.y0) - y(d.y1)); })
      .attr("stroke-width", 2)
      .attr("stroke", "black")
      .style("fill", function(d) { return color(d.key); } )
      .on("mouseover", function(d) {
        div.transition()
          .duration(200)
          .style("opacity", .9);
        div.html(
          "<table>"
            +"<tr><td>Label</td><td>"   +d["parent"]["label"]+"</td></tr>"
            +"<tr><td>Wins</td><td>"    +d["parent"]["pos"]  +"</td></tr>"
            +"<tr><td>Lossess</td><td>" +d["parent"]["neg"]  +"</td></tr>"
          +"</table>"
          )
          .style("left", (d3.event.pageX) + "px")
          .style("top", (d3.event.pageY - 28) + "px");
        })
      .on("mouseout", function(d) {
        div.transition()
          .duration(500)
          .style("opacity", 0);
        })
    ;

  // var legend = svg.selectAll(".legend")
  //   .data(color.domain())
  //   .enter().append("g")
  //   .attr("class", "legend");
  //   //.attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  // legend.append("rect")
  //   .attr("x", 675)
  //   .attr("y", function(d, i) { return i * 25 + 300 })
  //   .attr("width", 18)
  //   .attr("height", 18)
  //   .style("fill", color );

  // legend.append("text")
  //   .attr("x", 700)
  //   .attr("y", function(d, i) { return i * 25 + 309; })
  //   .attr("dy", ".35em")
  //   .style("text-anchor", "start")
  //   .text(function(d, i) { return legendlabels[i]; });

</script>
