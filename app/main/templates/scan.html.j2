{% extends "header.html.j2" %}

{% block content %}
    <span id="uploadOuterGrid">
      <span class="title">Scan Local Folders</span>
      {# <span class="subtitle">(Max {{SIMULTANEOUS_UPLOADS}} at time)</span> #}
      <form id=replay-file-upload-form method=post enctype=multipart/form-data>
        <span id="uploadGrid">
          <div class="upload-btn-wrapper">
            <button class="fake-submit">Add Directory</button>
            <input type=file name=file id=replay-file-upload multiple/>
          </div>
          {# <button type="button" disabled id=upload-button class="fake-submit" onclick='beginScan()'>Scan All</button> #}
          <button type="button" id=upload-button class="fake-submit" onclick='beginScan()'>Scan All</button>
          {% for s in scandirs %}
            <span id="u-filename-0" class ="transient u-filename">{{ s }}</span>
            <button type="button" onclick="" id="u-button-0" class="transient u-button">Scan</button>
          {% endfor %}
        </span>
      </form>
    </span>

    {# <script src="{{ url_for('static', filename='js/lzma-min.js') }}"></script> #}
    <script>
      var SLIPPIHEADER = "7b55037261775b24";
      var control      = document.getElementById("replay-file-upload");
      var uploadqueue  = [];

      function skipCompression(array, mode, cb_result, cb_progress) {
        return cb_result(array,null);
      }

      function beginScan() {
        var index    = 0;
        var ubutton  = document.getElementById("u-button-"+index);
        var formData = new FormData();
        var token    = "abcd1234";

        function checkProgress() {
          $.ajax({
              type        : "post",
              url         : "/api/scan/progress",
              data        : JSON.stringify({"token" : token}),
              dataType    : "json",
              contentType : "application/json",
              cache       : false,
              processData : false,
              success: function (rjson) {
                ubutton.innerText = "Scanning " + rjson["status"];// first set the value
              },
              complete: function (rjson) {
                if (!("done" in rjson["responseJSON"])) {
                  setTimeout(checkProgress, 500);
                }
              }
          });
        }

        $.ajax({
          type        : "post",
          url         : "/api/scan",
          data        : formData,
          contentType : false,
          cache       : false,
          processData : false,
          success     : function(rjson) {
            ubutton.title      = "Scanning " + JSON.stringify(rjson);
            ubutton.innerText  = rjson["status"];
            token              = rjson["token"];
            setTimeout(checkProgress, 500);
            // ubutton.className += " hasinfo";
            // if ("analysis-url" in rjson) {
            //   document.getElementById("u-filename-"+index).innerHTML = "<a title='View Analysis of "+rjson["filename"]+"' target='_blank' class='nostyle replay-link' href='"+rjson["analysis-url"]+"'>"+rjson["filename"]+"</a>";
            // }
          },
          error: function(XMLHttpRequest, textStatus, errorThrown) {
            ubutton.innerText = "Error";
            ubutton.title     = "Status: " + textStatus+"\nError: " + errorThrown;
          }
        });
      }

      function submitReplay(index=-1) {
        if (index < 0) {
          document.getElementById("upload-button").disabled = true;
          for(var i = 0; i < uploadqueue.length; i++) {
            submitReplay(i);
          }
          return;
        }
        var ubutton = document.getElementById("u-button-"+index);
        if (!uploadqueue[index].valid || ubutton.disabled) {
          return;
        }
        // alert(JSON.stringify(uploadqueue[index]));
        // alert(index);
        ubutton.disabled = true;

        ubutton.innerText = "Processing";
        var files = uploadqueue[index]["fdata"];
        var reader = new FileReader();
        reader.onload = function(e) {
          var fileByteArray = new Uint8Array(e.target.result);
          skipCompression(fileByteArray, 6, function(result, error) {
            ubutton.innerText = "Converting";
            compressed_replay = new File(
                [new Blob([new Uint8Array(result)], {type: "application/octet-stream"})],
                uploadqueue[index]["filename"]+(COMPRESS ? ".lzma" : ""));

            ubutton.innerText = "Uploading";
            var formData = new FormData();
            formData.append('file', compressed_replay);
            // formData.append('file', uploadqueue[index]["fdata"]);

            $.ajax({
              type        : "post",
              url         : "/api/upload",
              data        : formData,
              contentType : false,
              cache       : false,
              processData : false,
              success     : function(rjson) {
                ubutton.innerText  = rjson["status"];
                ubutton.title      = JSON.stringify(rjson);
                ubutton.className += " hasinfo";
                if ("analysis-url" in rjson) {
                  document.getElementById("u-filename-"+index).innerHTML = "<a title='View Analysis of "+rjson["filename"]+"' target='_blank' class='nostyle replay-link' href='"+rjson["analysis-url"]+"'>"+rjson["filename"]+"</a>";
                }
              },
              error: function(XMLHttpRequest, textStatus, errorThrown) {
                ubutton.innerText = "Error";
                ubutton.title     = "Status: " + textStatus+"\nError: " + errorThrown;
              }
            });
          }, function(percent) {
            // alert("progress");
            ubutton.innerText = "Compressing "+Math.round(percent*100)+"%";
          });
        }
        reader.readAsArrayBuffer(files);
      }

      function createUploadItem(u) {
        var k = ' \
          <span id="u-filename-'+u.id+'" class="transient u-filename">'+(u["filename"]||"[filename]")+'</span> \
          <button type="button" onclick="submitReplay('+u.id+')" id="u-button-'+u.id+'" class="transient u-button">'+(u["upload"]||"Upload")+'</button> \
          ';
          // <span id="u-status-'+u.id+'" class="u-status">'+(u["status"]||"Ready")+'</span> \
          // <button onclick="submitReplay('+u+')" class="u-button" disabled>'+(u["upload"]||"Upload")+'</button> \
        document.getElementById('uploadGrid').insertAdjacentHTML("beforeend", k);
      }

      function addTentativeUpload(udata, callback) {
        return function(e) {
          var arr = (new Uint8Array(e.target.result)).subarray(0, 8);
          var header = "";
          for(var i = 0; i < arr.length; i++) {
             char = arr[i].toString(16);
             if (char.length == 1) {
               header += "0";
             }
             header += char;
          }
          createUploadItem(udata);
         document.getElementById("upload-button").disabled = false;
          var ubutton = document.getElementById("u-button-"+udata.id);
          udata.valid = header === SLIPPIHEADER;
          if(udata.valid) {
            ubutton.disabled  = false;
            ubutton.innerText = "Upload";
            // udata["upload"]   = "Upload";
          } else {
            ubutton.disabled  = true;
            ubutton.innerText = "Not a valid Slippi replay";
            // udata["status"]   = "Failed";
            // udata["upload"]   = "Not a valid Slippi replay";
          }
        }
      }

      // When the control has changed, there are new files
      control.addEventListener("change", function(event) {
          //Delete all old items
          var elements = document.getElementById("uploadGrid").getElementsByClassName("transient");
          while (elements[0]) {
            elements[0].parentNode.removeChild(elements[0]);
          }
          //Reset the upload queue
          uploadqueue = [];

          //Get the list of files
          var files = control.files;

          //Set the data for each file, add them to the queue, and validate their headers
          for (var i = 0; i < Math.min(files.length,MAX_UPLOADS); i++) {
            var udata = {
              id:       i,
              status:   "Ready",
              filename: files[i].name,
              upload:   "",
              fdata:    files[i],
              valid:    false,
              };
            uploadqueue.push(udata);
            var fileReader       = new FileReader();
            fileReader.onloadend = addTentativeUpload(udata);
            fileReader.readAsArrayBuffer(files[i]);
          }
      }, false);
    </script>
{% endblock %}
